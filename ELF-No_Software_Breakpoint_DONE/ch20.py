def ROR(x, n):
    mask = (2L**n) - 1
    mask_bits = x & mask
    return (x >> n) | (mask_bits << (32 - n))

def ROL(x, n, bits=32):
    return ROR(x, bits - n)

start = 0x80
end = 0x123
fileIn = open("ch20.bin", "rb")
codeSegment = fileIn.read()[start:end] #doc tu start -> end
cl = 0

for i in range(0, len(codeSegment)):
	print ord(codeSegment[i])
	cl = (cl & 0xFFFFFF00) + ((cl + ord(codeSegment[i])) & 0x000000FF) # add cl, [eax]
	cl = ROL(cl, 3) # xoay bit
	
print "checksum : ",hex(cl)

b =[0x1E, 0xCD, 0x2A, 0xD5, 0x34, 0x87, 0xFC, 0x78, 0x64, 0x35,0x9D,
0xEC, 0xDE, 0x15, 0xAC, 0x97, 0x99, 0xAF, 0x96, 0xDA,0x79, 0x26, 0x4F, 0x32, 0xE0]

# key = [0x1E, 0xCD, 0x2A, 0xD5, 0x34, 0x87, 0xFC, 0x78, 0x64, 0x35, 0x9D, 0xEC,
# 0xDE, 0x15, 0xAC, 0x97, 0x99, 0xAF, 0x96, 0xDA, 0x79, 0x26, 0x4F, 0x32, 0xE0]

edx = cl
flag = ""
for c in range(len(b)-1,-1,-1):
	edx = ROR(edx, 1)
	flag = 	flag + chr((edx & 0x000000ff) ^ b[c])

print flag[::-1]


